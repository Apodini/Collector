// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: model.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Jaeger_ApiV2_ValueType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case string // = 0
  case bool // = 1
  case int64 // = 2
  case float64 // = 3
  case binary // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .string
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .string
    case 1: self = .bool
    case 2: self = .int64
    case 3: self = .float64
    case 4: self = .binary
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .string: return 0
    case .bool: return 1
    case .int64: return 2
    case .float64: return 3
    case .binary: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Jaeger_ApiV2_ValueType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Jaeger_ApiV2_ValueType] = [
    .string,
    .bool,
    .int64,
    .float64,
    .binary,
  ]
}

#endif  // swift(>=4.2)

enum Jaeger_ApiV2_SpanRefType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case childOf // = 0
  case followsFrom // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .childOf
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .childOf
    case 1: self = .followsFrom
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .childOf: return 0
    case .followsFrom: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Jaeger_ApiV2_SpanRefType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Jaeger_ApiV2_SpanRefType] = [
    .childOf,
    .followsFrom,
  ]
}

#endif  // swift(>=4.2)

struct Jaeger_ApiV2_KeyValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var vType: Jaeger_ApiV2_ValueType = .string

  var vStr: String = String()

  var vBool: Bool = false

  var vInt64: Int64 = 0

  var vFloat64: Double = 0

  var vBinary: Data = Data()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Jaeger_ApiV2_Log {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var fields: [Jaeger_ApiV2_KeyValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
}

struct Jaeger_ApiV2_SpanRef {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: Data = Data()

  var spanID: Data = Data()

  var refType: Jaeger_ApiV2_SpanRefType = .childOf

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Jaeger_ApiV2_Process {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serviceName: String = String()

  var tags: [Jaeger_ApiV2_KeyValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Jaeger_ApiV2_Span {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: Data = Data()

  var spanID: Data = Data()

  var operationName: String = String()

  var references: [Jaeger_ApiV2_SpanRef] = []

  var flags: UInt32 = 0

  var startTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _startTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var duration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _duration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var tags: [Jaeger_ApiV2_KeyValue] = []

  var logs: [Jaeger_ApiV2_Log] = []

  var process: Jaeger_ApiV2_Process {
    get {return _process ?? Jaeger_ApiV2_Process()}
    set {_process = newValue}
  }
  /// Returns true if `process` has been explicitly set.
  var hasProcess: Bool {return self._process != nil}
  /// Clears the value of `process`. Subsequent reads from it will return its default value.
  mutating func clearProcess() {self._process = nil}

  var processID: String = String()

  var warnings: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _startTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
  fileprivate var _duration: SwiftProtobuf.Google_Protobuf_Duration? = nil
  fileprivate var _process: Jaeger_ApiV2_Process? = nil
}

struct Jaeger_ApiV2_Trace {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spans: [Jaeger_ApiV2_Span] = []

  var processMap: [Jaeger_ApiV2_Trace.ProcessMapping] = []

  var warnings: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ProcessMapping {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var processID: String = String()

    var process: Jaeger_ApiV2_Process {
      get {return _process ?? Jaeger_ApiV2_Process()}
      set {_process = newValue}
    }
    /// Returns true if `process` has been explicitly set.
    var hasProcess: Bool {return self._process != nil}
    /// Clears the value of `process`. Subsequent reads from it will return its default value.
    mutating func clearProcess() {self._process = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _process: Jaeger_ApiV2_Process? = nil
  }

  init() {}
}

/// Note that both Span and Batch may contain a Process.
/// This is different from the Thrift model which was only used
/// for transport, because Proto model is also used by the backend
/// as the domain model, where once a batch is received it is split
/// into individual spans which are all processed independently,
/// and therefore they all need a Process. As far as on-the-wire
/// semantics, both Batch and Spans in the same message may contain
/// their own instances of Process, with span.Process taking priority
/// over batch.Process.
struct Jaeger_ApiV2_Batch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spans: [Jaeger_ApiV2_Span] = []

  var process: Jaeger_ApiV2_Process {
    get {return _process ?? Jaeger_ApiV2_Process()}
    set {_process = newValue}
  }
  /// Returns true if `process` has been explicitly set.
  var hasProcess: Bool {return self._process != nil}
  /// Clears the value of `process`. Subsequent reads from it will return its default value.
  mutating func clearProcess() {self._process = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _process: Jaeger_ApiV2_Process? = nil
}

struct Jaeger_ApiV2_DependencyLink {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var parent: String = String()

  var child: String = String()

  var callCount: UInt64 = 0

  var source: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "jaeger.api_v2"

extension Jaeger_ApiV2_ValueType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "STRING"),
    1: .same(proto: "BOOL"),
    2: .same(proto: "INT64"),
    3: .same(proto: "FLOAT64"),
    4: .same(proto: "BINARY"),
  ]
}

extension Jaeger_ApiV2_SpanRefType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHILD_OF"),
    1: .same(proto: "FOLLOWS_FROM"),
  ]
}

extension Jaeger_ApiV2_KeyValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KeyValue"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .standard(proto: "v_type"),
    3: .standard(proto: "v_str"),
    4: .standard(proto: "v_bool"),
    5: .standard(proto: "v_int64"),
    6: .standard(proto: "v_float64"),
    7: .standard(proto: "v_binary"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.key) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.vType) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.vStr) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.vBool) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.vInt64) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self.vFloat64) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.vBinary) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.vType != .string {
      try visitor.visitSingularEnumField(value: self.vType, fieldNumber: 2)
    }
    if !self.vStr.isEmpty {
      try visitor.visitSingularStringField(value: self.vStr, fieldNumber: 3)
    }
    if self.vBool != false {
      try visitor.visitSingularBoolField(value: self.vBool, fieldNumber: 4)
    }
    if self.vInt64 != 0 {
      try visitor.visitSingularInt64Field(value: self.vInt64, fieldNumber: 5)
    }
    if self.vFloat64 != 0 {
      try visitor.visitSingularDoubleField(value: self.vFloat64, fieldNumber: 6)
    }
    if !self.vBinary.isEmpty {
      try visitor.visitSingularBytesField(value: self.vBinary, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_KeyValue, rhs: Jaeger_ApiV2_KeyValue) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.vType != rhs.vType {return false}
    if lhs.vStr != rhs.vStr {return false}
    if lhs.vBool != rhs.vBool {return false}
    if lhs.vInt64 != rhs.vInt64 {return false}
    if lhs.vFloat64 != rhs.vFloat64 {return false}
    if lhs.vBinary != rhs.vBinary {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_Log: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Log"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timestamp"),
    2: .same(proto: "fields"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._timestamp) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.fields) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._timestamp {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if !self.fields.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fields, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_Log, rhs: Jaeger_ApiV2_Log) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs.fields != rhs.fields {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_SpanRef: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SpanRef"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trace_id"),
    2: .standard(proto: "span_id"),
    3: .standard(proto: "ref_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.traceID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.spanID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.refType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traceID.isEmpty {
      try visitor.visitSingularBytesField(value: self.traceID, fieldNumber: 1)
    }
    if !self.spanID.isEmpty {
      try visitor.visitSingularBytesField(value: self.spanID, fieldNumber: 2)
    }
    if self.refType != .childOf {
      try visitor.visitSingularEnumField(value: self.refType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_SpanRef, rhs: Jaeger_ApiV2_SpanRef) -> Bool {
    if lhs.traceID != rhs.traceID {return false}
    if lhs.spanID != rhs.spanID {return false}
    if lhs.refType != rhs.refType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_Process: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Process"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "service_name"),
    2: .same(proto: "tags"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.serviceName) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tags) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.serviceName.isEmpty {
      try visitor.visitSingularStringField(value: self.serviceName, fieldNumber: 1)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_Process, rhs: Jaeger_ApiV2_Process) -> Bool {
    if lhs.serviceName != rhs.serviceName {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_Span: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Span"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trace_id"),
    2: .standard(proto: "span_id"),
    3: .standard(proto: "operation_name"),
    4: .same(proto: "references"),
    5: .same(proto: "flags"),
    6: .standard(proto: "start_time"),
    7: .same(proto: "duration"),
    8: .same(proto: "tags"),
    9: .same(proto: "logs"),
    10: .same(proto: "process"),
    11: .standard(proto: "process_id"),
    12: .same(proto: "warnings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self.traceID) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.spanID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.operationName) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.references) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.flags) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._startTime) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._duration) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.tags) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.logs) }()
      case 10: try { try decoder.decodeSingularMessageField(value: &self._process) }()
      case 11: try { try decoder.decodeSingularStringField(value: &self.processID) }()
      case 12: try { try decoder.decodeRepeatedStringField(value: &self.warnings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traceID.isEmpty {
      try visitor.visitSingularBytesField(value: self.traceID, fieldNumber: 1)
    }
    if !self.spanID.isEmpty {
      try visitor.visitSingularBytesField(value: self.spanID, fieldNumber: 2)
    }
    if !self.operationName.isEmpty {
      try visitor.visitSingularStringField(value: self.operationName, fieldNumber: 3)
    }
    if !self.references.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.references, fieldNumber: 4)
    }
    if self.flags != 0 {
      try visitor.visitSingularUInt32Field(value: self.flags, fieldNumber: 5)
    }
    if let v = self._startTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }
    if let v = self._duration {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }
    if !self.tags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tags, fieldNumber: 8)
    }
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 9)
    }
    if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
    }
    if !self.processID.isEmpty {
      try visitor.visitSingularStringField(value: self.processID, fieldNumber: 11)
    }
    if !self.warnings.isEmpty {
      try visitor.visitRepeatedStringField(value: self.warnings, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_Span, rhs: Jaeger_ApiV2_Span) -> Bool {
    if lhs.traceID != rhs.traceID {return false}
    if lhs.spanID != rhs.spanID {return false}
    if lhs.operationName != rhs.operationName {return false}
    if lhs.references != rhs.references {return false}
    if lhs.flags != rhs.flags {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs.tags != rhs.tags {return false}
    if lhs.logs != rhs.logs {return false}
    if lhs._process != rhs._process {return false}
    if lhs.processID != rhs.processID {return false}
    if lhs.warnings != rhs.warnings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_Trace: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Trace"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spans"),
    2: .standard(proto: "process_map"),
    3: .same(proto: "warnings"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.spans) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.processMap) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.warnings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spans.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spans, fieldNumber: 1)
    }
    if !self.processMap.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.processMap, fieldNumber: 2)
    }
    if !self.warnings.isEmpty {
      try visitor.visitRepeatedStringField(value: self.warnings, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_Trace, rhs: Jaeger_ApiV2_Trace) -> Bool {
    if lhs.spans != rhs.spans {return false}
    if lhs.processMap != rhs.processMap {return false}
    if lhs.warnings != rhs.warnings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_Trace.ProcessMapping: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Jaeger_ApiV2_Trace.protoMessageName + ".ProcessMapping"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "process_id"),
    2: .same(proto: "process"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.processID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._process) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.processID.isEmpty {
      try visitor.visitSingularStringField(value: self.processID, fieldNumber: 1)
    }
    if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_Trace.ProcessMapping, rhs: Jaeger_ApiV2_Trace.ProcessMapping) -> Bool {
    if lhs.processID != rhs.processID {return false}
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_Batch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Batch"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "spans"),
    2: .same(proto: "process"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.spans) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._process) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.spans.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.spans, fieldNumber: 1)
    }
    if let v = self._process {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_Batch, rhs: Jaeger_ApiV2_Batch) -> Bool {
    if lhs.spans != rhs.spans {return false}
    if lhs._process != rhs._process {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Jaeger_ApiV2_DependencyLink: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DependencyLink"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parent"),
    2: .same(proto: "child"),
    3: .standard(proto: "call_count"),
    4: .same(proto: "source"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.parent) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.child) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self.callCount) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.source) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parent.isEmpty {
      try visitor.visitSingularStringField(value: self.parent, fieldNumber: 1)
    }
    if !self.child.isEmpty {
      try visitor.visitSingularStringField(value: self.child, fieldNumber: 2)
    }
    if self.callCount != 0 {
      try visitor.visitSingularUInt64Field(value: self.callCount, fieldNumber: 3)
    }
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Jaeger_ApiV2_DependencyLink, rhs: Jaeger_ApiV2_DependencyLink) -> Bool {
    if lhs.parent != rhs.parent {return false}
    if lhs.child != rhs.child {return false}
    if lhs.callCount != rhs.callCount {return false}
    if lhs.source != rhs.source {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
